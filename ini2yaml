#!/usr/bin/env python

import sys
import re
import ast
import argparse
import ConfigParser
from collections import defaultdict
from collections import OrderedDict
import yaml


# Thanks to Alex Martelli
class FakeGlobalSectionHead(object):
    def __init__(self, fp):
        self.fp = fp
        self.sechead = '[global]\n'

    def readline(self):
        if self.sechead:
            try:
                return self.sechead
            finally:
                self.sechead = None
        else:
            return self.fp.readline()


class literal_unicode(unicode):
    pass


def literal_unicode_representer(dumper, data):
    return dumper.represent_scalar(u'tag:yaml.org,2002:str', data, style='|')


# Parse host variable and return corresponding YAML object
def parse_value(value):
    result = yaml.load("value: " + value)['value']
    if isinstance(result, basestring):
        if '\\n' in result:  # Use YAML block literal for multi-line strings
            return literal_unicode(result.replace('\\n', '\n'))
        else:
            try:  # Unwrap nested YAML structures
                new_result = yaml.load("value: " + result)['value']
                if isinstance(new_result, list) or isinstance(
                        new_result, dict):
                    result = new_result
            except:
                pass
    return result


yaml.add_representer(literal_unicode, literal_unicode_representer)

if __name__ == '__main__':

    args_parser = argparse.ArgumentParser(
        description=
        'Read a INI file and print it converted to a YAML format on stdout')
    args_parser.add_argument(
        '-m',
        '--mode',
        dest='yaml_mode',
        type=str,
        choices=['inventory', 'flat'],
        default='flat',
        help='Mode chosen for the final YAML file')
    args_parser.add_argument(
        '-d',
        '--disable-default-section',
        dest='add_default_section',
        action='store_false',
        default=True,
        help=
        'Add one default section (required if the INI source file is section-less)'
    )
    args_parser.add_argument(
        'ini_filepath', help='File path of the source INI file')
    args = args_parser.parse_args()

    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    with open(args.ini_filepath, 'r') as fp:
        if args.add_default_section:
            config.readfp(FakeGlobalSectionHead(fp))
        else:
            config.readfp(fp)

    varRegex = re.compile(
        " *([a-zA-Z][a-zA-Z0-9_]+)=(true|True|false|False|[0-9]+|'[^']+'|\"[^\"]+\")"
    )

    if args.yaml_mode == 'inventory':
        inventory = {}
        for section in config.sections():
            group = section.split(':')
            if len(group) == 1:  # section contains host group
                for name, value in config.items(section):
                    if value:
                        value = name + '=' + value
                    else:
                        value = name
                    host = value.split(' ', 1)
                    hostname = host[0]
                    hostvars = host[1] if len(host) > 1 else ''
                    hostvars = varRegex.findall(hostvars)

                    inventory.setdefault('all', {}).setdefault(
                        'children', {}).setdefault(group[0], {}).setdefault(
                            'hosts', {})[hostname] = {}
                    for hostvar in hostvars:
                        value = parse_value(hostvar[1])
                        inventory.setdefault('all', {}).setdefault(
                            'children',
                            {}).setdefault(group[0], {}).setdefault(
                                'hosts', {})[hostname][hostvar[0]] = value
            elif group[1] == 'vars':  # section contains group vars
                for name, value in config.items(section):
                    value = parse_value(value)
                    inventory.setdefault('all', {}).setdefault(
                        'children', {}).setdefault(group[0], {}).setdefault(
                            'vars', {})[name] = value
            elif group[1] == 'children':  # section contains group of groups
                for name, value in config.items(section):
                    inventory.setdefault('all', {}).setdefault(
                        'children', {}).setdefault(group[0], {}).setdefault(
                            'children', {})[name] = {}
        print yaml.dump(
            inventory, default_flow_style=False, width=float("inf"))

    elif args.yaml_mode == 'flat':
        flatvars = {}
        for section in config.sections():
            group = section.split(':')
            if len(group) == 1:  # section contains host group
                for name, value in config.items(section):
                    if value:
                        value = name + '=' + value
                    else:
                        value = name
                    host = value.split(' ', 1)
                    hostname = host[0]
                    hostvars = host[1] if len(host) > 1 else ''
                    hostvars = varRegex.findall(hostvars)

                    for hostvar in hostvars:
                        value = parse_value(hostvar[1])
                        flatvars[hostvar[0]] = value
            elif group[1] == 'vars':  # section contains group vars
                for name, value in config.items(section):
                    value = parse_value(value)
                    flatvars[name] = value
            elif group[1] == 'children':  # section contains group of groups
                pass
        print yaml.dump(flatvars, default_flow_style=False, width=float("inf"))
